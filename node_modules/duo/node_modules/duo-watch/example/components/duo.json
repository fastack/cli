{
  "app/admin/index.js": {
    "id": "app/admin/index.js",
    "type": "js",
    "mtime": 1408044351000,
    "src": "/**\n * Module Dependencies\n */\n\nvar infinity = require('component/infinity');\nvar event = require('component/event');\n\nconsole.log('admin!!!');\n",
    "deps": {
      "component/infinity": "components/component-infinity@0.0.5/index.js",
      "component/event": "components/component-event@0.1.4/index.js"
    },
    "entry": true
  },
  "components/component-event@0.1.4/index.js": {
    "id": "components/component-event@0.1.4/index.js",
    "type": "js",
    "mtime": 1401250736000,
    "src": "var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',\n    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n    prefix = bind !== 'addEventListener' ? 'on' : '';\n\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nexports.bind = function(el, type, fn, capture){\n  el[bind](prefix + type, fn, capture || false);\n  return fn;\n};\n\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nexports.unbind = function(el, type, fn, capture){\n  el[unbind](prefix + type, fn, capture || false);\n  return fn;\n};",
    "deps": {}
  },
  "components/component-infinity@0.0.5/index.js": {
    "id": "components/component-infinity@0.0.5/index.js",
    "type": "js",
    "mtime": 1379615961000,
    "src": "/**\n * Module dependencies\n */\n\nvar event = require('event');\nvar query = require('query');\nvar throttle = require('throttle');\nvar debounce = require('debounce');\nvar Emitter = require('emitter');\n\n/**\n * Export `infinity`\n */\n\nmodule.exports = infinity;\n\n/**\n * Initialize `infinity`\n *\n * @param {Element|Window} container el\n * @return {infinity}\n * @api public\n */\n\nfunction infinity(el) {\n  if (!(this instanceof infinity)) return new infinity(el);\n  this.el = el;\n  this.isWindow = (el.self == el);\n  this.views = [];\n  this._margin = 0;\n  this.throttle = throttle(this.refresh.bind(this), 200);\n  this.debounce = debounce(this.refresh.bind(this), 100);\n  event.bind(el, 'scroll', this.throttle);\n  event.bind(el, 'scroll', this.debounce);\n  event.bind(el, 'resize', this.debounce);\n}\n\n/**\n * Mixin `Emitter`\n */\n\nEmitter(infinity.prototype);\n\n/**\n * Add an element. You may pass any number of arguments\n * to be called on the load and unload functions\n *\n * ex. infinity.add(view.el, view)\n *\n * @param {Element} el\n * @param {Mixed, ...} args\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.add = function(el) {\n  var view = {};\n  view.el = el;\n  view.args = [].slice.call(arguments) || [];\n  view.loaded = false;\n  this.views.push(view);\n  return this;\n};\n\n/**\n * Remove an element.\n *\n * ex. infinity.remove(el)\n *\n * @param {Element} el\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.remove = function(el) {\n  for (var i = 0, view; view = this.views[i]; i++) {\n    if (el == view.el) {\n      this.views.splice(i, 1);\n      break;\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * Get the coordinated of the box\n *\n * @return {Object} coords\n * @api private\n */\n\ninfinity.prototype.box = function() {\n  var el = this.el;\n  var margin = this._margin;\n  var box = {};\n\n  if (!this.isWindow) {\n    var rect = el.getBoundingClientRect();\n    box.top = rect.top;\n    box.left = rect.left;\n    box.width = rect.width;\n    box.height = rect.height;\n  } else {\n    box.top = 0;\n    box.left = 0;\n    box.height = el.innerHeight || document.documentElement.clientHeight;\n    box.width = el.innerWidth || document.documentElement.clientWidth;\n  }\n\n  box.top -= margin;\n  box.left -= margin;\n  box.width += (margin * 2);\n  box.height += (margin * 2);\n\n  return box;\n};\n\n/**\n * Add margin to the box\n *\n * @param {Number} margin\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.margin = function(margin) {\n  this._margin = margin;\n  return this;\n};\n\n/**\n * Is the element in view?\n *\n * @param {Object} view\n * @return {Boolean}\n * @api private\n */\n\ninfinity.prototype.visible = function(view) {\n  var box = this._box;\n  var pos = view.el.getBoundingClientRect();\n\n  // only load if our view has dimensions\n  if (0 === pos.width || 0 === pos.height) return false;\n\n  // check viewport if window otherwise view\n  return (this.isWindow) ? this.inViewport(pos, box)\n                         : this.inView(pos, box);\n};\n\n/**\n * Is the element in view?\n *\n * @param {Object} pos\n * @param {Object} box\n * @return {Boolean}\n * @api private\n */\n\ninfinity.prototype.inView = function(pos, box) {\n  return (\n    pos.top < (box.top + box.height) &&\n    pos.left < (box.left + box.width) &&\n    (pos.top + pos.height) > box.top &&\n    (pos.left + pos.width) > box.left\n  );\n};\n\n/**\n * Is the element in the viewport?\n *\n * TODO: inViewport and inView could probably be consolidated\n * with some better math\n *\n * @param {Object} pos\n * @param {Object} box\n * @return {Boolean}\n * @api private\n */\n\ninfinity.prototype.inViewport = function(pos, box) {\n  return (\n    pos.bottom >= box.top &&\n    pos.right >= box.left &&\n    pos.top <= box.height &&\n    pos.left <= box.width\n  );\n};\n\n/**\n * Add a load function\n *\n * @param {Function} fn\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.load = function(fn) {\n  this.on('load', fn);\n  return this;\n};\n\n/**\n * Add an unload function\n *\n * @param {Function} fn\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.unload = function(fn) {\n  this.on('unload', fn);\n  return this;\n};\n\n/**\n * Refresh, loading and unloading elements.\n *\n * Used internally but may need to be called\n * manually if you are programmatically adjusting\n * elements.\n *\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.refresh = function() {\n  var visibles = [];\n  var invisibles = [];\n\n  this._box = this.box();\n\n  // load / unload panes\n  //\n  // TODO: figure out a smarter way to not loop\n  // through all the elements time but maintain\n  // flexibility\n  for (var i = 0, view; view = this.views[i]; i++) {\n    var visible = this.visible(view);\n    if (visible && !view.loaded) {\n      visibles.push(view);\n    } else if (!visible && view.loaded) {\n      invisibles.push(view);\n    }\n  }\n\n  if (visibles.length) {\n    this.emit('loading');\n    for (var i = 0, view; view = visibles[i]; i++) {\n      this.emit.apply(this, ['load'].concat(view.args));\n      view.loaded = true;\n    }\n  }\n\n  if (invisibles.length) {\n    this.emit('unloading');\n    for (var i = 0, view; view = invisibles[i]; i++) {\n      this.emit.apply(this, ['unload'].concat(view.args));\n      view.loaded = false;\n    }\n  }\n\n  return this;\n};\n\n/**\n * Unbind events\n *\n * @return {infinity}\n * @api public\n */\n\ninfinity.prototype.unbind = function() {\n  event.unbind(this.el, 'scroll', this.throttle);\n  event.unbind(this.el, 'scroll', this.debounce);\n  event.unbind(this.el, 'resize', this.debounce);\n  return this;\n};\n",
    "deps": {
      "event": "components/component-event@0.1.4/index.js",
      "query": "components/component-query@0.0.3/index.js",
      "throttle": "components/component-throttle@0.0.2/index.js",
      "debounce": "components/component-debounce@1.0.0/index.js",
      "emitter": "components/component-emitter@1.1.3/index.js"
    }
  },
  "components/component-query@0.0.3/index.js": {
    "id": "components/component-query@0.0.3/index.js",
    "type": "js",
    "mtime": 1392070210000,
    "src": "function one(selector, el) {\n  return el.querySelector(selector);\n}\n\nexports = module.exports = function(selector, el){\n  el = el || document;\n  return one(selector, el);\n};\n\nexports.all = function(selector, el){\n  el = el || document;\n  return el.querySelectorAll(selector);\n};\n\nexports.engine = function(obj){\n  if (!obj.one) throw new Error('.one callback required');\n  if (!obj.all) throw new Error('.all callback required');\n  one = obj.one;\n  exports.all = obj.all;\n  return exports;\n};\n",
    "deps": {}
  },
  "components/component-throttle@0.0.2/index.js": {
    "id": "components/component-throttle@0.0.2/index.js",
    "type": "js",
    "mtime": 1364333424000,
    "src": "\n/**\n * Module exports.\n */\n\nmodule.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most one time per\n * `wait` milliseconds.\n *\n * @param {Function} func The `Function` instance to wrap.\n * @param {Number} wait The minimum number of milliseconds that must elapse in between `func` invokations.\n * @return {Function} A new function that wraps the `func` function passed in.\n * @api public\n */\n\nfunction throttle (func, wait) {\n  var rtn; // return value\n  var last = 0; // last invokation timestamp\n  return function throttled () {\n    var now = new Date().getTime();\n    var delta = now - last;\n    if (delta >= wait) {\n      rtn = func.apply(this, arguments);\n      last = now;\n    }\n    return rtn;\n  };\n}\n",
    "deps": {}
  },
  "components/component-emitter@1.1.3/index.js": {
    "id": "components/component-emitter@1.1.3/index.js",
    "type": "js",
    "mtime": 1403245556000,
    "src": "\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n",
    "deps": {}
  },
  "components/component-debounce@1.0.0/index.js": {
    "id": "components/component-debounce@1.0.0/index.js",
    "type": "js",
    "mtime": 1403375905000,
    "src": "\n/**\n * Module dependencies.\n */\n\nvar now = require('date-now');\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = now() - timestamp;\n\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function debounced() {\n    context = this;\n    args = arguments;\n    timestamp = now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n",
    "deps": {
      "date-now": "components/Raynos-date-now@v1.0.1/index.js"
    }
  },
  "components/Raynos-date-now@v1.0.1/index.js": {
    "id": "components/Raynos-date-now@v1.0.1/index.js",
    "type": "js",
    "mtime": 1402528929000,
    "src": "module.exports = Date.now || now\n\nfunction now() {\n    return new Date().getTime()\n}\n",
    "deps": {}
  },
  "app/base/index.js": {
    "id": "app/base/index.js",
    "type": "js",
    "mtime": 1408044352000,
    "src": "/**\n * Module Dependencies\n */\n\nvar ms = require('guille/ms.js');\nvar clone = require('component/clone');\nvar uid = require('uid');\nvar array = require('array');\n\n",
    "deps": {
      "guille/ms.js": "components/guille-ms.js@0.6.2/index.js",
      "component/clone": "components/component-clone@0.2.2/index.js",
      "uid": "components/component-uid@0.0.2/index.js",
      "array": "components/matthewmueller-array@0.4.3/index.js"
    }
  },
  "components/guille-ms.js@0.6.2/index.js": {
    "id": "components/guille-ms.js@0.6.2/index.js",
    "type": "js",
    "mtime": 1386259049000,
    "src": "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n",
    "deps": {}
  },
  "components/component-uid@0.0.2/index.js": {
    "id": "components/component-uid@0.0.2/index.js",
    "type": "js",
    "mtime": 1392855388000,
    "src": "/**\n * Base 64 characters\n */\n\nvar BASE64 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_';\n\n/**\n * Make a Uint8Array into a string\n *\n * @param {Uint8Array}\n * @returns {String}\n * @api private\n */\n\nfunction tostr(bytes) {\n  var r, i;\n\n  r = [];\n  for (i = 0; i < bytes.length; i++) {\n    r.push(BASE64[bytes[i] % 64]);\n  }\n\n  return r.join('');\n}\n\n/**\n * Generate an unique id\n *\n * @param {Number} The number of chars of the uid\n * @api public\n */\n\nfunction uid(length) {\n  if (typeof window != 'undefined') {\n    if (typeof window.crypto != 'undefined') {\n      return tostr(window.crypto.getRandomValues(new Uint8Array(length)));\n    } else {\n      var a = new Array(length);\n      for (var i = 0; i < length; i++) {\n        a[i] = Math.floor(Math.random() * 256);\n      }\n      return tostr(a);\n    }\n  } else {\n    var crypto = require('cryp'+'to'); // avoid browserify polyfill\n    try {\n      return tostr(crypto.randomBytes(length));\n    } catch (e) {\n      // entropy sources are drained\n      return tostr(crypto.pseudoRandomBytes(length));\n    }\n  }\n}\n\n/**\n * Exports\n */\n\nmodule.exports = uid;\n",
    "deps": {}
  },
  "components/matthewmueller-array@0.4.3/index.js": {
    "id": "components/matthewmueller-array@0.4.3/index.js",
    "type": "js",
    "mtime": 1392224594000,
    "src": "module.exports = require('./lib/array');\n",
    "deps": {
      "./lib/array": "components/matthewmueller-array@0.4.3/lib/array.js"
    }
  },
  "components/component-clone@0.2.2/index.js": {
    "id": "components/component-clone@0.2.2/index.js",
    "type": "js",
    "mtime": 1394167648000,
    "src": "/**\n * Module dependencies.\n */\n\nvar type;\ntry {\n  type = require('component-type');\n} catch (_) {\n  type = require('type');\n}\n\n/**\n * Module exports.\n */\n\nmodule.exports = clone;\n\n/**\n * Clones objects.\n *\n * @param {Mixed} any object\n * @api public\n */\n\nfunction clone(obj){\n  switch (type(obj)) {\n    case 'object':\n      var copy = {};\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          copy[key] = clone(obj[key]);\n        }\n      }\n      return copy;\n\n    case 'array':\n      var copy = new Array(obj.length);\n      for (var i = 0, l = obj.length; i < l; i++) {\n        copy[i] = clone(obj[i]);\n      }\n      return copy;\n\n    case 'regexp':\n      // from millermedeiros/amd-utils - MIT\n      var flags = '';\n      flags += obj.multiline ? 'm' : '';\n      flags += obj.global ? 'g' : '';\n      flags += obj.ignoreCase ? 'i' : '';\n      return new RegExp(obj.source, flags);\n\n    case 'date':\n      return new Date(obj.getTime());\n\n    default: // string, number, boolean, …\n      return obj;\n  }\n}\n",
    "deps": {
      "component-type": "components/component-type@1.0.0/index.js",
      "type": "components/component-type@1.0.0/index.js"
    }
  },
  "components/component-type@1.0.0/index.js": {
    "id": "components/component-type@1.0.0/index.js",
    "type": "js",
    "mtime": 1363138036000,
    "src": "\n/**\n * toString ref.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(val){\n  switch (toString.call(val)) {\n    case '[object Function]': return 'function';\n    case '[object Date]': return 'date';\n    case '[object RegExp]': return 'regexp';\n    case '[object Arguments]': return 'arguments';\n    case '[object Array]': return 'array';\n    case '[object String]': return 'string';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val && val.nodeType === 1) return 'element';\n  if (val === Object(val)) return 'object';\n\n  return typeof val;\n};\n",
    "deps": {}
  },
  "components/matthewmueller-array@0.4.3/lib/array.js": {
    "id": "components/matthewmueller-array@0.4.3/lib/array.js",
    "type": "js",
    "mtime": 1392224594000,
    "src": "/**\n * Module dependencies\n */\n\nvar Enumerable = require('./enumerable');\nvar proto = Array.prototype;\nvar isArray = Array.isArray || require('isArray');\n\ntry {\n  var Emitter = require('emitter');\n} catch(e) {\n  var Emitter = require('emitter-component');\n}\n\n/*\n * Expose `array`\n */\n\nmodule.exports = array;\n\n/**\n * Initialize `array`\n *\n * @param {Array|Object|Undefined} arr\n * @return {array}\n * @api public\n */\n\nfunction array(arr) {\n  if(!(this instanceof array)) return new array(arr);\n  arr = arr || [];\n\n  if (isArray(arr)) {\n    // create array-like object\n    var len = this.length = arr.length;\n    for(var i = 0; i < len; i++) this[i] = arr[i];\n  } else if ('object' == typeof arr) {\n    if (isObjectLiteral(arr)) {\n      arr._ctx = this._ctx = JSON.parse(JSON.stringify(arr));\n    }\n\n    // mixin to another object\n    for(var key in array.prototype) arr[key] = array.prototype[key];\n    return arr;\n  }\n}\n\n/**\n * Mixin `Emitter`\n */\n\nEmitter(array.prototype);\n\n/**\n * Mixin `Enumerable`\n */\n\nEnumerable(array.prototype);\n\n/**\n * Removes the last element from an array and returns that element\n *\n * @return {Mixed} removed element\n * @api public\n */\n\narray.prototype.pop = function() {\n  var ret = proto.pop.apply(this, arguments);\n  this.emit('remove', ret, this.length);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Push a value onto the end of the array,\n * returning the length of the array\n *\n * @param {Mixed, ...} elements\n * @return {Number}\n * @api public\n */\n\narray.prototype.push = function() {\n  var ret = proto.push.apply(this, arguments),\n      args = [].slice.call(arguments);\n  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], ret - len + i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Removes the first element from an array and returns that element.\n *\n * @return {Mixed}\n * @api public\n */\n\narray.prototype.shift = function() {\n  var ret = proto.shift.apply(this, arguments);\n  this.emit('remove', ret, 0);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Adds and/or removes elements from an array.\n *\n * @param {Number} index\n * @param {Number} howMany\n * @param {Mixed, ...} elements\n * @return {Array} removed elements\n * @api public\n */\n\narray.prototype.splice = function(index) {\n  var ret = proto.splice.apply(this, arguments),\n      added = [].slice.call(arguments, 2);\n  for(var i = 0, len = ret.length; i < len; i++) this.emit('remove', ret[i], index);\n  for(    i = 0, len = added.length; i < len; i++) this.emit('add', added[i], index + i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Adds one or more elements to the front of an array\n * and returns the new length of the array.\n *\n * @param {Mixed, ...} elements\n * @return {Number} length\n * @api public\n */\n\narray.prototype.unshift = function() {\n  var ret = proto.unshift.apply(this, arguments),\n      args = [].slice.call(arguments);\n  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Reverses the array, emitting the `reverse` event\n *\n * @api public\n */\n\narray.prototype.reverse = function () {\n  var ret = proto.reverse.apply(this, arguments);\n  this.emit('reverse');\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Sort the array, emitting the `sort` event\n *\n * With strings:\n *\n *   fruits.sort('calories')\n *\n * Descending sort:\n *\n *   fruits.sort('calories', 'desc')\n *\n * @param {undefined|Function|String} fn\n * @param {Nunber|String|Boolean} dir\n * @return {Array}\n * @api public\n */\nvar sort = array.prototype.sort;\narray.prototype.sort = function () {\n  var ret = sort.apply(this, arguments);\n  this.emit('sort');\n  this.emit('change');\n  return ret;\n}\n\n\n/**\n * toJSON\n *\n * @return {Object}\n * @api public\n */\n\narray.prototype.toJSON = function() {\n  return this.map(function(obj) {\n    return (obj.toJSON) ? obj.toJSON() : obj;\n  }).toArray();\n}\n\n/**\n * Convert the array-like object to an actual array\n *\n * @return {Array}\n * @api public\n */\n\narray.prototype.toArray  = function() {\n  return proto.slice.call(this);\n};\n\n/**\n * Static: get the array item\n *\n * @param {Mixed} obj\n * @return {Mixed}\n * @api public\n */\n\narray.get = function(obj) {\n  return obj;\n};\n\n/**\n * Get the array item\n *\n * @param {Number} i\n * @return {Mixed}\n * @api public\n */\n\narray.prototype.get = array.get;\n\n/**\n * Attach the rest of the array methods\n */\n\nvar methods = ['toString', 'concat', 'join', 'slice'];\n\nmethods.forEach(function(method) {\n  array.prototype[method] = function() {\n    return proto[method].apply(this, arguments);\n  };\n});\n\n/**\n * Remake the array, emptying it, then adding values back in\n *\n * @api private\n */\n\narray.prototype._remake = function(arr) {\n  var construct = this.constructor;\n  var clone = (this._ctx) ? new construct(this._ctx) : new construct();\n  proto.push.apply(clone, arr);\n  clone.get = this.get || array.get;\n  return clone;\n};\n\n/**\n * Is object utility\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObjectLiteral(obj) {\n  return obj.constructor == Object;\n}\n",
    "deps": {
      "./enumerable": "components/matthewmueller-array@0.4.3/lib/enumerable.js",
      "isArray": "components/yields-isArray@1.0.0/index.js",
      "emitter": "components/component-emitter@1.1.3/index.js"
    }
  },
  "components/yields-isArray@1.0.0/index.js": {
    "id": "components/yields-isArray@1.0.0/index.js",
    "type": "js",
    "mtime": 1359734596000,
    "src": "\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Wether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n",
    "deps": {}
  },
  "components/matthewmueller-array@0.4.3/lib/enumerable.js": {
    "id": "components/matthewmueller-array@0.4.3/lib/enumerable.js",
    "type": "js",
    "mtime": 1392224594000,
    "src": "/**\n * Module Dependencies\n */\n\nvar toFunction = require('to-function'),\n    proto = Array.prototype,\n    enumerable = {};\n\n/**\n * Mixin to `obj`.\n *\n *    var Enumerable = require('enumerable');\n *    Enumerable(Something.prototype);\n *\n * @param {Object} obj\n * @return {Object} obj\n * @api private\n */\n\nmodule.exports = function(obj) {\n  for(var key in enumerable) obj[key] = enumerable[key];\n  return obj;\n};\n\n/**\n * Iterate each value and invoke `fn(val, i)`.\n *\n *    users.each(function(val, i){\n *\n *    })\n *\n * @param {Function} fn\n * @return {Object} self\n * @api public\n */\n\nenumerable.forEach =\nenumerable.each = function(fn){\n  var arr = this,\n      len = arr.length;\n\n  for (var i = 0; i < len; i++) {\n    fn(arr[i], i);\n  }\n\n  return this;\n};\n\n/**\n * Map each return value from `fn(val, i)`.\n *\n * Passing a callback function:\n *\n *    users.map(function(user){\n *      return user.name.first\n *    })\n *\n * Passing a property string:\n *\n *    users.map('name.first')\n *\n * @param {Function} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.map = function(fn){\n  fn = toFunction(fn);\n  var out = [],\n      arr = this,\n      len = arr.length;\n\n  for (var i = 0; i < len; ++i) {\n    out.push(fn(arr.get(arr[i]), i));\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Select all values that return a truthy value of `fn(val, i)`.\n *\n *    users.select(function(user){\n *      return user.age > 20\n *    })\n *\n *  With a property:\n *\n *    items.select('complete')\n *\n * @param {Function|String} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.filter =\nenumerable.select = function(fn){\n  fn = toFunction(fn);\n  var out = [],\n      arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) out.push(arr[i]);\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Select all unique values.\n *\n *    nums.unique()\n *\n * @param {Function|String} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.unique = function(fn){\n  var out = [],\n      vals = [],\n      arr = this,\n      len = arr.length,\n      val;\n\n  fn = (fn) ? toFunction(fn) : function(o) { return o; };\n\n  for (var i = 0; i < len; ++i) {\n    val = fn(arr.get(arr[i]));\n    if (~vals.indexOf(val)) continue;\n    vals.push(val);\n    out.push(arr[i]);\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Reject all values that return a truthy value of `fn(val, i)`.\n *\n * Rejecting using a callback:\n *\n *    users.reject(function(user){\n *      return user.age < 20\n *    })\n *\n * Rejecting with a property:\n *\n *    items.reject('complete')\n *\n * Rejecting values via `==`:\n *\n *    data.reject(null)\n *    users.reject(tobi)\n *\n * @param {Function|String|Mixed} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.reject = function(fn){\n  var out = [],\n      arr = this,\n      len = arr.length,\n      val, i;\n\n  if ('string' == typeof fn) fn = toFunction(fn);\n  if (fn) {\n    for (i = 0; i < len; ++i) {\n      val = arr.get(arr[i]);\n      if (!fn(val, i)) out.push(arr[i]);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      val = arr.get(arr[i]);\n      if (val != fn) out.push(arr[i]);\n    }\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Reject `null` and `undefined`.\n *\n *    [1, null, 5, undefined].compact()\n *    // => [1,5]\n *\n * @return {Enumerable}\n * @api public\n */\n\n\nenumerable.compact = function(){\n  return this.reject(null);\n};\n\n/**\n * Return the first value when `fn(val, i)` is truthy,\n * otherwise return `undefined`.\n *\n *    users.find(function(user){\n *      return user.role == 'admin'\n *    })\n *\n * With a property string:\n *\n *    users.find('age > 20')\n *\n * @param {Function|String} fn\n * @return {Mixed}\n * @api public\n */\n\nenumerable.find = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return arr[i];\n  }\n};\n\n/**\n * Return the last value when `fn(val, i)` is truthy,\n * otherwise return `undefined`.\n *\n *    users.findLast(function(user){\n *      return user.role == 'admin'\n *    })\n *\n * @param {Function} fn\n * @return {Mixed}\n * @api public\n */\n\nenumerable.findLast = function (fn) {\n    fn = toFunction(fn);\n  var arr = this,\n  i = arr.length;\n\n  while(i--) if (fn(arr.get(arr[i]), i)) return arr[i];\n};\n\n/**\n * Assert that all invocations of `fn(val, i)` are truthy.\n *\n * For example ensuring that all pets are ferrets:\n *\n *    pets.all(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n *    users.all('admin')\n *\n * @param {Function|String} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.every = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (!fn(val, i)) return false;\n  }\n\n  return true;\n};\n\n/**\n * Assert that none of the invocations of `fn(val, i)` are truthy.\n *\n * For example ensuring that no pets are admins:\n *\n *    pets.none(function(p){ return p.admin })\n *    pets.none('admin')\n *\n * @param {Function|String} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.none = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return false;\n  }\n  return true;\n};\n\n/**\n * Assert that at least one invocation of `fn(val, i)` is truthy.\n *\n * For example checking to see if any pets are ferrets:\n *\n *    pets.any(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n * @param {Function} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.any = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return true;\n  }\n  return false;\n};\n\n/**\n * Count the number of times `fn(val, i)` returns true.\n *\n *    var n = pets.count(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n * @param {Function} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.count = function(fn){\n  fn = toFunction(fn);\n  var n = 0,\n      arr = this,\n      len = arr.length,\n      val;\n\n  if(!fn) return len;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) ++n;\n  }\n  return n;\n};\n\n/**\n * Determine the indexof `obj` or return `-1`.\n *\n * @param {Mixed} obj\n * @return {Number}\n * @api public\n */\n\nenumerable.indexOf = function(obj) {\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (val === obj) return i;\n  }\n\n  return -1;\n};\n\n/**\n * Determine the last indexof `obj` or return `-1`.\n *\n * @param {Mixed} obj\n * @return {Number}\n * @api public\n */\n\nenumerable.lastIndexOf = function(obj) {\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = --len; i >= 0; --i) {\n    val = arr.get(arr[i]);\n    if (val === obj) return i;\n  }\n\n  return -1;\n};\n\n/**\n * Check if `obj` is present in this enumerable.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api public\n */\n\nenumerable.has = function(obj) {\n  return !! ~this.indexOf(obj);\n};\n\n/**\n * Reduce with `fn(accumulator, val, i)` using\n * optional `init` value defaulting to the first\n * enumerable value.\n *\n * @param {Function} fn\n * @param {Mixed} [val]\n * @return {Mixed}\n * @api public\n */\n\nenumerable.reduce = function(fn, init){\n  var arr = this,\n      len = arr.length,\n      i = 0,\n      val;\n\n  val = null == init\n    ? arr.get(i++)\n    : init;\n\n  for (; i < len; ++i) {\n    val = fn(val, arr.get(arr[i]), i);\n  }\n\n  return val;\n};\n\n\n/**\n * Determine the max value.\n *\n * With a callback function:\n *\n *    pets.max(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.max('age')\n *\n * With immediate values:\n *\n *    nums.max()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.max = function(fn){\n  var arr = this,\n      len = arr.length,\n      max = -Infinity,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n = fn(arr.get(arr[i]), i);\n      max = n > max ? n : max;\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n = arr.get(arr[i]);\n      max = n > max ? n : max;\n    }\n  }\n\n  return max;\n};\n\n/**\n * Determine the min value.\n *\n * With a callback function:\n *\n *    pets.min(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.min('age')\n *\n * With immediate values:\n *\n *    nums.min()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.min = function(fn){\n  var arr = this,\n      len = arr.length,\n      min = Infinity,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n = fn(arr.get(arr[i]), i);\n      min = n < min ? n : min;\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n = arr.get(arr[i]);\n      min = n < min ? n : min;\n    }\n  }\n\n  return min;\n};\n\n/**\n * Determine the sum.\n *\n * With a callback function:\n *\n *    pets.sum(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.sum('age')\n *\n * With immediate values:\n *\n *    nums.sum()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.sum = function(fn){\n  var arr = this,\n      len = arr.length,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n += fn(arr.get(arr[i]), i);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n += arr.get(arr[i]);\n    }\n  }\n\n  return n;\n};\n\n/**\n * Determine the average value.\n *\n * With a callback function:\n *\n *    pets.avg(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.avg('age')\n *\n * With immediate values:\n *\n *    nums.avg()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.avg =\nenumerable.mean = function(fn){\n  var arr = this,\n      len = arr.length,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n += fn(arr.get(arr[i]), i);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n += arr.get(arr[i]);\n    }\n  }\n\n  return n / len;\n};\n\n/**\n * Return the first value, or first `n` values.\n *\n * @param {Number|Function} [n]\n * @return {Array|Mixed}\n * @api public\n */\n\nenumerable.first = function(n) {\n  var arr = this;\n\n  if(!n) return arr[0];\n  else if ('number' !== typeof n) return this.find(n);\n\n  var len = Math.min(n, arr.length),\n      out = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    out[i] = arr[i];\n  }\n\n  return out;\n\n};\n\n/**\n * Return the last value, or last `n` values.\n *\n * @param {Number|Function} [n]\n * @return {Array|Mixed}\n * @api public\n */\n\nenumerable.last = function(n){\n  var arr = this,\n      len = arr.length;\n\n  if(!n) return arr[len - 1];\n  else if ('number' !== typeof n) return this.findLast(n);\n\n  var i = Math.max(0, len - n),\n      out = [];\n\n  for (; i < len; ++i) {\n    out.push(arr[i]);\n  }\n\n  return out;\n};\n\n/**\n * Create a hash from a given `key`\n *\n * @param {String} key\n * @return {Object}\n * @api public\n */\n\nenumerable.hash = function(str) {\n  var arr = this,\n      len = arr.length,\n      out = {},\n      key;\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    key = arr.get(arr[i])[str];\n    // TODO: assess, maybe we want out[i] = arr.get(i)\n    if(!key) continue;\n    out[key] = arr[i];\n  };\n\n  return out;\n};\n\n/**\n * Sort the array.\n *\n * With strings:\n *\n *   fruits.sort('calories')\n *\n * Descending sort:\n *\n *   fruits.sort('calories', 'desc')\n *\n * @param {undefined|Function|String} fn\n * @param {Nunber|String|Boolean} dir\n * @return {Array}\n * @api public\n */\n\nenumerable.sort = function(fn, dir) {\n  dir = (dir !== undefined) ? dir : 1;\n  var sort = proto.sort;\n  if(!fn) return sort.apply(this);\n  else if('function' == typeof fn) return sort.apply(this, arguments);\n\n  var self = this;\n  fn = toFunction(fn);\n\n  // support ascending and descending directions\n  if('string' == typeof dir) {\n    if(/asc/.test(dir)) dir = 1;\n    else if(/des/.test(dir)) dir = -1;\n  } else if('boolean' == typeof dir) {\n    dir = (dir) ? 1 : -1;\n  }\n\n  function compare(a, b) {\n    a = fn(self.get(a)), b = fn(self.get(b));\n    if(a < b) return -(dir);\n    else if(a > b) return dir;\n    return 0\n  };\n\n  return sort.call(this, compare);\n};\n",
    "deps": {
      "to-function": "components/component-to-function@1.2.1/index.js"
    }
  },
  "components/component-to-function@1.2.1/index.js": {
    "id": "components/component-to-function@1.2.1/index.js",
    "type": "js",
    "mtime": 1391623747000,
    "src": "/**\n * Module Dependencies\n */\n\ntry {\n  var expr = require('props');\n} catch(e) {\n  var expr = require('props-component');\n}\n\n/**\n * Expose `toFunction()`.\n */\n\nmodule.exports = toFunction;\n\n/**\n * Convert `obj` to a `Function`.\n *\n * @param {Mixed} obj\n * @return {Function}\n * @api private\n */\n\nfunction toFunction(obj) {\n  switch ({}.toString.call(obj)) {\n    case '[object Object]':\n      return objectToFunction(obj);\n    case '[object Function]':\n      return obj;\n    case '[object String]':\n      return stringToFunction(obj);\n    case '[object RegExp]':\n      return regexpToFunction(obj);\n    default:\n      return defaultToFunction(obj);\n  }\n}\n\n/**\n * Default to strict equality.\n *\n * @param {Mixed} val\n * @return {Function}\n * @api private\n */\n\nfunction defaultToFunction(val) {\n  return function(obj){\n    return val === obj;\n  }\n}\n\n/**\n * Convert `re` to a function.\n *\n * @param {RegExp} re\n * @return {Function}\n * @api private\n */\n\nfunction regexpToFunction(re) {\n  return function(obj){\n    return re.test(obj);\n  }\n}\n\n/**\n * Convert property `str` to a function.\n *\n * @param {String} str\n * @return {Function}\n * @api private\n */\n\nfunction stringToFunction(str) {\n  // immediate such as \"> 20\"\n  if (/^ *\\W+/.test(str)) return new Function('_', 'return _ ' + str);\n\n  // properties such as \"name.first\" or \"age > 18\" or \"age > 18 && age < 36\"\n  return new Function('_', 'return ' + get(str));\n}\n\n/**\n * Convert `object` to a function.\n *\n * @param {Object} object\n * @return {Function}\n * @api private\n */\n\nfunction objectToFunction(obj) {\n  var match = {}\n  for (var key in obj) {\n    match[key] = typeof obj[key] === 'string'\n      ? defaultToFunction(obj[key])\n      : toFunction(obj[key])\n  }\n  return function(val){\n    if (typeof val !== 'object') return false;\n    for (var key in match) {\n      if (!(key in val)) return false;\n      if (!match[key](val[key])) return false;\n    }\n    return true;\n  }\n}\n\n/**\n * Built the getter function. Supports getter style functions\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction get(str) {\n  var props = expr(str);\n  if (!props.length) return '_.' + str;\n\n  var val;\n  for(var i = 0, prop; prop = props[i]; i++) {\n    val = '_.' + prop;\n    val = \"('function' == typeof \" + val + \" ? \" + val + \"() : \" + val + \")\";\n    str = str.replace(new RegExp(prop, 'g'), val);\n  }\n\n  return str;\n}\n",
    "deps": {
      "props": "components/component-props@1.1.2/index.js"
    }
  },
  "components/component-props@1.1.2/index.js": {
    "id": "components/component-props@1.1.2/index.js",
    "type": "js",
    "mtime": 1396149195000,
    "src": "/**\n * Global Names\n */\n\nvar globals = /\\b(this|Array|Date|Object|Math|JSON)\\b/g;\n\n/**\n * Return immediate identifiers parsed from `str`.\n *\n * @param {String} str\n * @param {String|Function} map function or prefix\n * @return {Array}\n * @api public\n */\n\nmodule.exports = function(str, fn){\n  var p = unique(props(str));\n  if (fn && 'string' == typeof fn) fn = prefixed(fn);\n  if (fn) return map(str, p, fn);\n  return p;\n};\n\n/**\n * Return immediate identifiers in `str`.\n *\n * @param {String} str\n * @return {Array}\n * @api private\n */\n\nfunction props(str) {\n  return str\n    .replace(/\\.\\w+|\\w+ *\\(|\"[^\"]*\"|'[^']*'|\\/([^/]+)\\//g, '')\n    .replace(globals, '')\n    .match(/[$a-zA-Z_]\\w*/g)\n    || [];\n}\n\n/**\n * Return `str` with `props` mapped with `fn`.\n *\n * @param {String} str\n * @param {Array} props\n * @param {Function} fn\n * @return {String}\n * @api private\n */\n\nfunction map(str, props, fn) {\n  var re = /\\.\\w+|\\w+ *\\(|\"[^\"]*\"|'[^']*'|\\/([^/]+)\\/|[a-zA-Z_]\\w*/g;\n  return str.replace(re, function(_){\n    if ('(' == _[_.length - 1]) return fn(_);\n    if (!~props.indexOf(_)) return _;\n    return fn(_);\n  });\n}\n\n/**\n * Return unique array.\n *\n * @param {Array} arr\n * @return {Array}\n * @api private\n */\n\nfunction unique(arr) {\n  var ret = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (~ret.indexOf(arr[i])) continue;\n    ret.push(arr[i]);\n  }\n\n  return ret;\n}\n\n/**\n * Map with prefix `str`.\n */\n\nfunction prefixed(str) {\n  return function(_){\n    return str + _;\n  };\n}\n",
    "deps": {}
  },
  "app/home/index.js": {
    "id": "app/home/index.js",
    "type": "js",
    "mtime": 1408044357000,
    "src": "/**\n * Module Dependencies\n */\n\nvar Base = require('../base');\nvar type = require('type');\n\n/**\n * Views\n */\n\nvar Signup = require('./lib/signup');\nvar Login = require('./lib/login');\n",
    "deps": {
      "../base": "app/base/index.js",
      "type": "components/component-type@1.0.0/index.js",
      "./lib/signup": "app/home/lib/signup/index.js",
      "./lib/login": "app/home/lib/login/index.js"
    },
    "entry": true
  },
  "app/home/lib/login/index.js": {
    "id": "app/home/lib/login/index.js",
    "type": "js",
    "mtime": 1403297024000,
    "src": "module.exports = 'log out!'\n",
    "deps": {}
  },
  "app/home/lib/signup/index.js": {
    "id": "app/home/lib/signup/index.js",
    "type": "js",
    "mtime": 1403297040000,
    "src": "/**\n * Module Dependencies\n */\n\nvar event = require('event');\n\nmodule.exports = 'signup!';\n",
    "deps": {
      "event": "components/component-event@0.1.4/index.js"
    }
  }
}